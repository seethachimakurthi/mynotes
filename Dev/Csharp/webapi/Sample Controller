using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Description;
using webAPITest.Models;

namespace webAPITest.Controllers
{ 
    public class ProductsController : ApiController
    {
        //dI to allow other classes to pass in different object
        //private IWebAPITestContext db = new webAPITestContext();

        IRepository repository;

        public ProductsController() : this(new Repository()) { }
        public ProductsController(IRepository _repository)
        {
            repository = _repository;
        }

        [Route("api/products/plain")]
        public async Task<IEnumerable<Product>> GetProductsAsync()
        {
            IEnumerable<Product> products;
            try
            {
                products = await repository.GetAllProductsAsync();
            }
            catch (Exception)
            {
                throw;
            }
            return products;
        }

        [Route("api/products/httpresult")]
        public async Task<IHttpActionResult> GetProductsHttpActionResultAsync() {

            IEnumerable<Product> products;

            try
            {
                products = await repository.GetAllProductsAsync();
            }
            catch (Exception)
            {
                throw;
            }
            return Ok(products);
        }


        //// GET: api/Products
        //public IQueryable<Product> GetProducts()
        //{
        //    return db.Products;
        //}

        //// GET: api/Products/5
        //[ResponseType(typeof(Product))]
        //public async Task<IHttpActionResult> GetProduct(int id)
        //{
        //    Product product = await db.Products.FindAsync(id);
        //    if (product == null)
        //    {
        //        return NotFound();
        //    }

        //    return Ok(product);
        //}

        //// PUT: api/Products/5
        //[ResponseType(typeof(void))]
        //public async Task<IHttpActionResult> PutProduct(int id, Product product)
        //{
        //    if (!ModelState.IsValid)
        //    {
        //        return BadRequest(ModelState);
        //    }

        //    if (id != product.Id)
        //    {
        //        return BadRequest();
        //    }

        //    db.MarkAsModified(product);
        //    //db.Entry(product).State = EntityState.Modified;

        //    try
        //    {
        //        await db.MarkAsModified(product);
        //    }
        //    catch (DbUpdateConcurrencyException)
        //    {
        //        if (!ProductExists(id))
        //        {
        //            return NotFound();
        //        }
        //        else
        //        {
        //            throw;
        //        }
        //    }

        //    return StatusCode(HttpStatusCode.NoContent);
        //}

        //// POST: api/Products
        //[ResponseType(typeof(Product))]
        //public async Task<IHttpActionResult> PostProduct(Product product)
        //{
        //    if (!ModelState.IsValid)
        //    {
        //        return BadRequest(ModelState);
        //    }

        //    db.Products.Add(product);
        //    await db.SaveChangesAsync();

        //    return CreatedAtRoute("DefaultApi", new { id = product.Id }, product);
        //}

        //// DELETE: api/Products/5
        //[ResponseType(typeof(Product))]
        //public async Task<IHttpActionResult> DeleteProduct(int id)
        //{
        //    Product product = await db.Products.FindAsync(id);
        //    if (product == null)
        //    {
        //        return NotFound();
        //    }

        //    db.Products.Remove(product);
        //    await db.SaveChangesAsync();

        //    return Ok(product);
        //}

        //protected override void Dispose(bool disposing)
        //{
        //    if (disposing)
        //    {
        //        db.Dispose();
        //    }
        //    base.Dispose(disposing);
        //}

        //private bool ProductExists(int id)
        //{
        //    return db.Products.Count(e => e.Id == id) > 0;


        //}

        //public void getTest()
        //{
        //    List<string> testList = new List<string>() {
        //        "test1",
        //        "test12",
        //        "test3"

        //    };

        //    var result = from s in testList
        //                 where s.Contains("1")
        //                 select s;
            

        }
    }
